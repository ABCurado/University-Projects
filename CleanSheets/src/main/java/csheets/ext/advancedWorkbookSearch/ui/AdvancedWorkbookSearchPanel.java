/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csheets.ext.advancedWorkbookSearch.ui;

import csheets.CleanSheets;
import csheets.core.Workbook;
import csheets.ext.advancedWorkbookSearch.AdvancedWorkbookSearchController;
import csheets.ext.advancedWorkbookSearch.AdvancedWorkbookSearchExtension;
import csheets.ui.DefaulListModel;
import csheets.ui.FileChooser;
import csheets.ui.ctrl.UIController;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 * This is the Side Bar Panel.
 *
 * @author Pedro Gomes 1130383@isep.ipp.pt
 */
public class AdvancedWorkbookSearchPanel extends JPanel {

	/**
	 * Default Search Pattern.
	 */
	private static final String EXTENSION = "\\.cls";
	private static final String DEFAULT = ".*\\.cls";

	/**
	 * UIController.
	 *
	 */
	private UIController uicontroller;

	/**
	 * AdvancedWorkbookSearchController.
	 */
	private AdvancedWorkbookSearchController controller = new AdvancedWorkbookSearchController();

	/**
	 * Current Search Directory.
	 */
	private File directory;

	/**
	 * Current Search Pattern. By default
	 */
	private String pattern = DEFAULT;

	/**
	 * Searched Files.
	 */
	private List<File> files = new ArrayList<>();

	/**
	 * Results List Model.
	 */
	private DefaulListModel list = new DefaulListModel();

	/**
	 * Preview Model table.
	 */
	private DefaultTableModel table = new DefaultTableModel();

	/**
	 * Workbook.
	 */
	private Workbook wb;

	/**
	 * Workbooks found counter.
	 */
	private int cont;

	/**
	 * Creates new form AdvancedWorkbookSearchPanel.
	 *
	 * @param uicontroller UIController.
	 */
	public AdvancedWorkbookSearchPanel(UIController uicontroller) {
		setName(AdvancedWorkbookSearchExtension.NAME);
		this.uicontroller = uicontroller;
		jResultList = new JList(list);
		jPreviewTable = new JTable(table);
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldPath = new javax.swing.JTextField();
        jButtonPath = new javax.swing.JButton();
        jButtonSearch = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jResultList = new javax.swing.JList();
        jPatternFieldPattern = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPreviewTable = new javax.swing.JTable();
        jImagePanel = new javax.swing.JLabel();
        jCheckBoxActive = new javax.swing.JCheckBox();
        jLabelResult = new javax.swing.JLabel();

        /**
        * Clears Field.
        */
        jTextFieldPath.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        jTextFieldPath.setText("insert directory...");
        jTextFieldPath.addMouseListener(new MouseAdapter(){
            public void mouseClicked(MouseEvent e){
                jTextFieldPath.setText("");
                directory = new File("");
            }
        });
        jTextFieldPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPathActionPerformed(evt);
            }
        });

        jButtonPath.setText("...");
        jButtonPath.setSize(20, 50);
        jButtonPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPathActionPerformed(evt);
            }
        });

        jButtonSearch.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        jButtonSearch.setText("Search");
        jButtonSearch.setSize(20, 50);
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jResultList.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        jResultList.setModel(new DefaulListModel());
        jResultList.setPreferredSize(new java.awt.Dimension(300, 200));
        jResultList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jResultsListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jResultList);

        jPatternFieldPattern.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        jPatternFieldPattern.setText("search pattern");
        jPatternFieldPattern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPatternFieldPatternActionPerformed(evt);
            }
        });
        /**
        * Pressing Enter after Pattern starts Search Process.
        */
        jPatternFieldPattern.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent evt) {
                if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
                    performSearch();
                }
            }
        });
        /**
        * Clears Field.
        */
        jPatternFieldPattern.addMouseListener(new MouseAdapter(){
            public void mouseClicked(MouseEvent e){
                jPatternFieldPattern.setText("");
                pattern = "";
            }
        });

        jPreviewTable.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(51, 102, 255)));
        jPreviewTable.setEnabled(false);
        jPreviewTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                " ", " ", " ", " ", " "
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jPreviewTable);

        //jImagePanel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jImagePanel.setIcon(new ImageIcon(
            AdvancedWorkbookSearchExtension.class.getResource("res/img/spinning.gif")));
    jImagePanel.setVisible(false); //by default

    jCheckBoxActive.setText("active");

    jLabelResult.setText("Result");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jTextFieldPath, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                .addComponent(jPatternFieldPattern, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jButtonSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonPath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jCheckBoxActive)
                    .addGap(0, 0, Short.MAX_VALUE))
                .addComponent(jImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        .addGroup(layout.createSequentialGroup()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 7, Short.MAX_VALUE))
        .addComponent(jLabelResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonPath, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jPatternFieldPattern, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addComponent(jImagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxActive)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(2, 2, 2)
            .addComponent(jLabelResult)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * Directory button retrieves the search directory as a File. A Dialog will
	 * retrieve the directory choosen by the user. The FileChooser is set up to
	 * be a directory only.
	 *
	 * @param evt evt.
	 */
    private void jButtonPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPathActionPerformed
		jTextFieldPath.setEnabled(false);
		JFileChooser dir = new JFileChooser();
		dir.setFileSelectionMode(FileChooser.DIRECTORIES_ONLY);
		int option = dir.showDialog(null, null);
		if (option == JFileChooser.APPROVE_OPTION) {//if a directory was chosen from dialog.
			File _directory = dir.getSelectedFile();
			if (validateDirectory(_directory)) { //checks if selected directory is valid.
				directory = _directory;
				jTextFieldPath.setText(directory.toString());
			} else {//if dialog was closed/canceled.
				directory = null;
				jTextFieldPath.setText("Invalid Directory.");
			}
		} else if (option == JFileChooser.CANCEL_OPTION) {
			directory = null;
		}
		jTextFieldPath.setEnabled(true);
    }//GEN-LAST:event_jButtonPathActionPerformed

	/**
	 * The Search directory is displayed on this field.
	 *
	 * @param evt evt.
	 */
    private void jTextFieldPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPathActionPerformed

    }//GEN-LAST:event_jTextFieldPathActionPerformed

	/**
	 * Begins the Search Process. Search Button.
	 *
	 * @param evt evt.
	 */
    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
		if (task == null) {
			jButtonSearch.setEnabled(false);
			performSearch();
			jButtonSearch.setEnabled(true);
		} else {
			task.active = false;
		}
    }//GEN-LAST:event_jButtonSearchActionPerformed

	/**
	 * Retrieves the Pattern text.
	 *
	 * @param evt evt
	 */
    private void jPatternFieldPatternActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPatternFieldPatternActionPerformed

    }//GEN-LAST:event_jPatternFieldPatternActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonPath;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JCheckBox jCheckBoxActive;
    private javax.swing.JLabel jImagePanel;
    private javax.swing.JLabel jLabelResult;
    private javax.swing.JTextField jPatternFieldPattern;
    private javax.swing.JTable jPreviewTable;
    private javax.swing.JList jResultList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextFieldPath;
    // End of variables declaration//GEN-END:variables

	/**
	 * Search Process occurs in a new Thread. The AWSController will handle the
	 * Search and return the list of Workbook found.
	 */
	private void performSearch() {
		if (validateDirectory(directory)) { //checks directory.
			pattern = jPatternFieldPattern.getText();
			if (validatePattern()) {//checks pattern.
				list.clear(); //clears previous results.
				TaskRunnable newthread = new TaskRunnable();
				newthread.active = this.jCheckBoxActive.isSelected();
				task = newthread;
				//jImagePanel.setVisible(true); //enables search "indicator".
				new Thread(newthread).start(); //starts the new Thread.
			} else { //invalid pattern.
				jPatternFieldPattern.setText("Invalid");
			}
		} else {//invalid dir.
			jTextFieldPath.setText("Invalid Directory.");
		}
	}

	private TaskRunnable task = null;

	class TaskRunnable implements Runnable {

		public boolean active = false;

		@Override
		public void run() {
			jButtonPath.setEnabled(false);
			jCheckBoxActive.setEnabled(false);
			jTextFieldPath.setEnabled(false);
			jPatternFieldPattern.setEnabled(false);
			jButtonSearch.setText("Cancel");
			do {
				jLabelResult.setText("Searching....");
				jImagePanel.setVisible(true);
				cont = 0; //sets counter to 0 on each search.
				jImagePanel.setVisible(true);
				files = controller.search(directory, pattern);
				checkDuplicatedFiles(); //sets up a list without duplicated files.
				postSearchUIOperations(); //required operations after each Search.
			} while (this.active);
			jButtonPath.setEnabled(true);
			jCheckBoxActive.setEnabled(true);
			jTextFieldPath.setEnabled(true);
			jPatternFieldPattern.setEnabled(true);
			jButtonSearch.setText("Search");
			task = null;
		}

	}

	/**
	 * This method handles different behaviour associated with mouse
	 * interaction. For one-click over the found Workbook the system shows a
	 * preview of that Workbook. If pressed twice the result is also loaded to
	 * the current workspace.
	 *
	 * @param evt mouse event.
	 */
	private void jResultsListMouseClicked(MouseEvent evt) {
		if (evt.getClickCount() == 1) { //if clicked once.
			File file = (File) jResultList.getSelectedValue();
			CleanSheets instance = new CleanSheets(); //sets up a new instance of Cleansheets to load the information required.
			try {
				instance.load(file); //loads file.
			} catch (IOException | ClassCastException | ClassNotFoundException | ArrayIndexOutOfBoundsException ex) {
				JOptionPane.
					showMessageDialog(null, "This File is Corrupted!", "Error", JOptionPane.ERROR_MESSAGE);
			}//handling corrupted files.
			wb = instance.getWorkbook(file); //saves workbook
			try {
				setUpPreview();//goes for preview.
			} catch (NullPointerException | ArrayIndexOutOfBoundsException ex) {
				JOptionPane.
					showMessageDialog(null, "Couldn't load preview.", "Error", JOptionPane.ERROR_MESSAGE);
			}
		} else if (evt.getClickCount() == 2) { //if clicked twice.
			File file = (File) jResultList.getSelectedValue();
			try {
				uicontroller.getCleanSheets().load(file); //UIController loads selected Workbook to current workspace.
			} catch (IOException | ClassNotFoundException | ClassCastException | ArrayIndexOutOfBoundsException ex) {
				JOptionPane.
					showMessageDialog(null, "This File is Corrupted!", "Error", JOptionPane.ERROR_MESSAGE);
			}
		}
	}

	/**
	 * Sets up the Preview. Advanced Workbook Controller handles the preview
	 * information.
	 *
	 * @throws NullPointerException
	 */
	private void setUpPreview() throws NullPointerException {
		String[] previewTitles = new String[WorkbookPreview.COLUMNS];
		String[][] previewContent = new String[WorkbookPreview.COLUMNS][WorkbookPreview.ROWS];
		controller.setUpWorkbookPreview(wb, previewContent, previewTitles);
		table = new DefaultTableModel(previewContent, previewTitles);
		jPreviewTable.setModel(table); // sets the table for visualization.
		jPreviewTable.setEnabled(false);
		jPreviewTable.setVisible(true);
	}

	/**
	 * Sets up a Results List without duplicated Files.
	 */
	private void checkDuplicatedFiles() {
		for (File f : files) {
			if (!list.contains(f)) {
				cont++;
				list.addElement(f);
			}
		}
	}

	/**
	 * Sets up the UI for next Search.
	 */
	private void postSearchUIOperations() {
		String endSearch = "Search Completed! " + list.getSize() + " Results found.";
		this.jLabelResult.setText(endSearch);
		jButtonSearch.setEnabled(true);
		//list.addElement(endSearch);
		jResultList.setModel(list);
		jResultList.
			setSelectionMode(ListSelectionModel.SINGLE_SELECTION); //Single File Selection.
		jResultList.setVisible(true);
		jImagePanel.setVisible(false);
		jPatternFieldPattern.setEnabled(true);
	}

	/**
	 * Checks if pattern is valid.
	 *
	 * @return true for valid pattern.
	 */
	private boolean validatePattern() {
		if (pattern.equalsIgnoreCase("") || pattern.
			equalsIgnoreCase("search pattern")) {
			pattern = DEFAULT;
		}
		if (!pattern.contains(EXTENSION)) {
			pattern += EXTENSION;
		}
		try {
			Pattern temp = Pattern.compile(pattern);
		} catch (PatternSyntaxException e) {
			return false;
		}
		return true;
	}

	/**
	 * Checks if Directory is valid.
	 *
	 * @return true for valid directory.
	 */
	private boolean validateDirectory(File _file) {
		if (_file == null) {
			return false;
		}
		if (!_file.exists()) { //checks if File exist.
			return false;
		}
		if (!_file.isDirectory()) { //checks if File is a Directory.
			return false;
		}
		if (_file.toString().equalsIgnoreCase("")) { //check if File is empty.
			return false;
		}
		return true;
	}
}
