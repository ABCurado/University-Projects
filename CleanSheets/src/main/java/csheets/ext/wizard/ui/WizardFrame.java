/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csheets.ext.wizard.ui;

import csheets.core.IllegalValueTypeException;
import csheets.core.formula.compiler.FormulaCompilationException;
import csheets.ui.ctrl.UIController;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;

/**
 *
 * @author AB-1140280
 */
public class WizardFrame extends javax.swing.JFrame {

	WizardController controller;
	UIController uiController;

	/**
	 * Creates new form WizardFrame
	 *
	 * @param uiController uiController
	 */
	public WizardFrame(UIController uiController) {
		setTitle("Function Wizard");
		setLocationRelativeTo(null);
		controller = new WizardController(uiController);
		this.uiController = uiController;
		initComponents();
		selectedFunctionTextBox.setEnabled(false);
		loadFunctions();
		setVisible(true);
		setLocationRelativeTo(null);

		formulaTextArea.getDocument().
			addDocumentListener(new DocumentListener() {
				@Override
				public void insertUpdate(DocumentEvent de) {
					updateResultTextBox();
				}

				@Override
				public void removeUpdate(DocumentEvent de) {
					updateResultTextBox();
				}

				@Override
				public void changedUpdate(DocumentEvent de) {
					updateResultTextBox();
				}
			});

		if (uiController != null && !uiController.getActiveCell().getContent().
			equals("")) {
			formulaTextArea.setText(uiController.getActiveCell().getContent());
		}
	}

	private void loadFunctions() {
		FunctionListModel model = controller.getFunctions();
		functionsList.setModel(model);

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jTextField1 = new javax.swing.JTextField();
        resultTextBox = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        selectedFunctionTextBox = new javax.swing.JTextField();
        confirmButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        functionsList = new javax.swing.JList<>();
        helpButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        formulaTextArea = new javax.swing.JTextArea();
        treeButton = new javax.swing.JButton();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        resultTextBox.setEditable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Result");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Function");

        selectedFunctionTextBox.setText("Select a function");

        confirmButton.setText("Confirm");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        functionsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                functionsListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(functionsList);

        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Construct the formula:");

        formulaTextArea.setColumns(20);
        formulaTextArea.setLineWrap(true);
        formulaTextArea.setRows(5);
        jScrollPane3.setViewportView(formulaTextArea);

        treeButton.setText("Draw Tree");
        treeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(selectedFunctionTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(153, 153, 153)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(resultTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 30, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(confirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(helpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(treeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17))
                            .addComponent(jScrollPane3))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(selectedFunctionTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resultTextBox, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmButton)
                    .addComponent(helpButton)
                    .addComponent(cancelButton)
                    .addComponent(treeButton))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * When a function is clicked diplays detailed function info
	 *
	 * @param evt
	 */
    private void functionsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_functionsListMouseClicked
		int index = functionsList.getSelectedIndex();
		String info = ((FunctionListModel) functionsList.getModel()).
			getFunctionInfo(index, controller);

		if (evt.getClickCount() == 1) {
			selectedFunctionTextBox.setText(info);
		} else if (evt.getClickCount() > 1) {
			if (!formulaTextArea.getText().equals("")) {
				info = info.substring(1);
			}
			formulaTextArea.insert(info, formulaTextArea.getCaretPosition());
		}
    }//GEN-LAST:event_functionsListMouseClicked

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
		this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

	/**
	 * Tries to execute the function in selectedFunctionTextBox if an an
	 * exception occurs a message dialog is presented to the user showing the
	 * error
	 *
	 * @param evt
	 */
    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
	try {
            controller.setCellsFormula(formulaTextArea.getText());
        } catch (FormulaCompilationException ex) {
            JOptionPane.showMessageDialog(this, "Unable to set the cell's content because of the invalid formula.");
            return;
        }
        this.dispose();
    }//GEN-LAST:event_confirmButtonActionPerformed

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
	if (functionsList.getSelectedIndex() != -1) {
            String help = ((FunctionListModel) functionsList.getModel()).
			getHelp(functionsList.getSelectedIndex());
		JOptionPane.showMessageDialog(this, help);
        }
    }//GEN-LAST:event_helpButtonActionPerformed

    private void treeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treeButtonActionPerformed
		try {
			if (!formulaTextArea.getText().isEmpty() && !formulaTextArea.
				getText().equals("") && !resultTextBox.getText().
				startsWith("At")) {
				controller.buildAST(formulaTextArea.getText(), this);
			}
		} catch (FormulaCompilationException ex) {
			JOptionPane.showMessageDialog(this, ex.toString());
		}
    }//GEN-LAST:event_treeButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton confirmButton;
    private javax.swing.JTextArea formulaTextArea;
    private javax.swing.JList<String> functionsList;
    private javax.swing.JButton helpButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField resultTextBox;
    private javax.swing.JTextField selectedFunctionTextBox;
    private javax.swing.JButton treeButton;
    // End of variables declaration//GEN-END:variables

	private void updateResultTextBox() {
		if (formulaTextArea.getText().equals("")) {
			resultTextBox.setText("");
		} else {
			try {
				String result = controller.executeFormula(formulaTextArea.
					getText());
				resultTextBox.setText(result);
			} catch (FormulaCompilationException | IllegalValueTypeException |
				IllegalArgumentException ex) {
				resultTextBox.setText(ex.getMessage());
			}
		}
	}

	protected void selectElement(String element) throws BadLocationException {
		String text = formulaTextArea.getText();
		int index = text.indexOf(element);
		Highlighter hl = formulaTextArea.getHighlighter();
		hl.removeAllHighlights();
		while (index >= 0) {
			try {
				hl.
					addHighlight(index, index + element.length(), DefaultHighlighter.DefaultPainter);
				index = text.indexOf(element, index + element.length());
			} catch (BadLocationException ex) {
			}
		}
	}

	/* Lang04.2
    private void openTextFields(int i) {
        List<FunctionParameter> lista = new ArrayList<>();
        if (i != 0) {

            for (FunctionParameter fPar : this.controller.getParametersOfFunctionSelected()) {
                lista.add(fPar);
            }
        }
        Iterator<FunctionParameter> it = lista.iterator();
        switch (i) {
            case 1:
                FunctionParameter a = it.next();
                txtFieldParameter1.setVisible(true);
                txtFieldParameter1.setText(a.getValueType().toString());
                txtFieldParameter2.setVisible(false);
                txtFieldParameter3.setVisible(false);
                txtFieldParameter4.setVisible(false);
                break;
            case 2:
                FunctionParameter b = it.next();
                txtFieldParameter1.setVisible(true);
                txtFieldParameter1.setText(b.getValueType().toString());
                FunctionParameter c = it.next();
                txtFieldParameter2.setVisible(true);
                txtFieldParameter2.setText(c.getValueType().toString());
                txtFieldParameter3.setVisible(false);
                txtFieldParameter4.setVisible(false);
                break;
            case 3:
                FunctionParameter d = it.next();
                txtFieldParameter1.setVisible(true);
                txtFieldParameter1.setText(d.getValueType().toString());
                FunctionParameter e = it.next();
                txtFieldParameter2.setVisible(true);
                txtFieldParameter2.setText(e.getValueType().toString());
                FunctionParameter f = it.next();
                txtFieldParameter3.setText(f.getValueType().toString());
                txtFieldParameter3.setVisible(true);
                txtFieldParameter4.setVisible(false);
                break;
            case 4:
                FunctionParameter g = it.next();
                txtFieldParameter1.setVisible(true);
                txtFieldParameter1.setText(g.getValueType().toString());
                FunctionParameter h = it.next();
                txtFieldParameter2.setVisible(true);
                txtFieldParameter2.setText(h.getValueType().toString());
                FunctionParameter j = it.next();
                txtFieldParameter3.setText(j.getValueType().toString());
                txtFieldParameter3.setVisible(true);
                FunctionParameter l = it.next();
                txtFieldParameter4.setText(l.getValueType().toString());
                txtFieldParameter4.setVisible(true);
                break;
            default:
                txtFieldParameter1.setVisible(false);
                txtFieldParameter2.setVisible(false);
                txtFieldParameter3.setVisible(false);
                txtFieldParameter4.setVisible(false);
        }
        this.revalidate();
        this.repaint();
    }*/
}
