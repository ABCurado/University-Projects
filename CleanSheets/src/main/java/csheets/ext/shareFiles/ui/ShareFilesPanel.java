/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csheets.ext.shareFiles.ui;

import csheets.ext.shareFiles.ShareFilesController;
import csheets.ext.shareFiles.ShareFilesExtension;
import csheets.notification.Notification;
import csheets.ui.ctrl.UIController;
import java.io.File;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Jo√£o Martins
 */
public class ShareFilesPanel extends JPanel implements Observer {

	/**
	 * The UIController
	 */
	private final UIController uiController;
	private ShareFilesController controller;
	private String filePath;
	private String dowloadsPath;
	private DefaultListModel filesModel;
	private DefaultListModel downloadsModel;

	/**
	 * Creates new form SearchPanel
	 *
	 * @param controller The UI
	 */
	public ShareFilesPanel(UIController controller) {
		setName(ShareFilesExtension.NAME);
		this.controller = new ShareFilesController();
		this.uiController = controller;
		this.initComponents();
		this.filesModel = new DefaultListModel();
		this.downloadsModel = new DefaultListModel();
		this.jListFiles.setModel(filesModel);
		this.jListDowloads.setModel(downloadsModel);
		this.update(null, null);
		Notification.filesInformer().addObserver(this);
	}

	@Override
	public void update(Observable o, Object arg) {
		if (arg instanceof Map) {
			Map<String, String> data = (Map) arg;
			if (data.get("reference").equals("files")) {
				String ip = ((String) data.get("ip"));
				String port = ((String) data.get("port"));
				String[] files = ((String) data.get("files")).split(";");
				for (int i = 0; i < files.length; i++) {

					if (downloadsModel.
						contains(ip + ":" + port + " " + files[i] + " downloading...")) {
						this.downloadsModel.
							removeElement(ip + ":" + port + " " + files[i] + " downloading...");
						this.downloadsModel.
							addElement(ip + ":" + port + " " + files[i] + " up to date");
					}

					if (!downloadsModel.
						contains(ip + ":" + port + " " + files[i] + " up to date")) {
						this.downloadsModel.
							addElement(ip + ":" + port + " " + files[i] + " up to date");
					}
				}
			}
		} else {
			this.jTextFieldDowloadsPath.setText(this.controller.pathDownloads());
			this.jTextFieldFilesPath.setText(this.controller.pathFiles());
			this.filesModel.removeAllElements();
			for (File file : this.controller.files()) {
				this.filesModel.addElement(file.getName());
			}
		}
		this.revalidate();
		this.repaint();
	}

	public String findPath(String type) {
		JFileChooser chooser = new JFileChooser();
		chooser.setCurrentDirectory(new java.io.File("."));
		chooser.setDialogTitle("Define " + type + " Path");
		chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		chooser.setAcceptAllFileFilterUsed(false);
		String path = null;
		if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
			path = chooser.getCurrentDirectory().getPath();
		} else {
			JOptionPane.
				showMessageDialog(this, "No Selection!", "Find Path", JOptionPane.ERROR_MESSAGE);
		}
		return path;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabPane2 = new javax.swing.JTabbedPane();
        panelNotes2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListFiles = new javax.swing.JList<>();
        jTextFieldFilesPath = new javax.swing.JTextField();
        jButtonFilePath = new javax.swing.JButton();
        panelLists = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListDowloads = new javax.swing.JList<>();
        jButtonDowloadPath = new javax.swing.JButton();
        jTextFieldDowloadsPath = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        jScrollPane1.setViewportView(jListFiles);

        jButtonFilePath.setText("Path");
        jButtonFilePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFilePathActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelNotes2Layout = new javax.swing.GroupLayout(panelNotes2);
        panelNotes2.setLayout(panelNotes2Layout);
        panelNotes2Layout.setHorizontalGroup(
            panelNotes2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNotes2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldFilesPath))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
        );
        panelNotes2Layout.setVerticalGroup(
            panelNotes2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelNotes2Layout.createSequentialGroup()
                .addGroup(panelNotes2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldFilesPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonFilePath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE))
        );

        tabPane2.addTab("Files", panelNotes2);

        jScrollPane3.setViewportView(jListDowloads);

        jButtonDowloadPath.setText("Path");
        jButtonDowloadPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDowloadPathActionPerformed(evt);
            }
        });

        jButton1.setText("Download");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelListsLayout = new javax.swing.GroupLayout(panelLists);
        panelLists.setLayout(panelListsLayout);
        panelListsLayout.setHorizontalGroup(
            panelListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
            .addGroup(panelListsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonDowloadPath, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldDowloadsPath))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelListsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelListsLayout.setVerticalGroup(
            panelListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelListsLayout.createSequentialGroup()
                .addGroup(panelListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDowloadPath)
                    .addComponent(jTextFieldDowloadsPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE))
        );

        tabPane2.addTab("Dowloads", panelLists);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(tabPane2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPane2)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFilePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFilePathActionPerformed
		String path = findPath("Files");
		if (path != null) {
			this.controller.pathFiles(path);
		}
		this.update(null, null);
    }//GEN-LAST:event_jButtonFilePathActionPerformed

    private void jButtonDowloadPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDowloadPathActionPerformed
		String path = findPath("Downloads");
		if (path != null) {
			this.controller.pathDownloads(path);
		}
		this.update(null, null);
    }//GEN-LAST:event_jButtonDowloadPathActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
		int[] selectedFiles = jListDowloads.getSelectedIndices();
		for (int i = 0; i < selectedFiles.length; i++) {
			int selectedFile = selectedFiles[i];
			String text = (String) downloadsModel.get(selectedFile);
			String newText = text.replaceAll(" up to date", " downloading...");
			downloadsModel.setElementAt(newText, selectedFile);
		}
		this.revalidate();
		this.repaint();
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonDowloadPath;
    private javax.swing.JButton jButtonFilePath;
    private javax.swing.JList<String> jListDowloads;
    private javax.swing.JList<String> jListFiles;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextFieldDowloadsPath;
    private javax.swing.JTextField jTextFieldFilesPath;
    private javax.swing.JPanel panelLists;
    private javax.swing.JPanel panelNotes2;
    private javax.swing.JTabbedPane tabPane2;
    // End of variables declaration//GEN-END:variables
}
