package csheets.ext.reminder.ui;

import csheets.domain.Reminder;
import csheets.ext.reminder.ReminderController;
import csheets.ext.reminder.ReminderExtension;
import csheets.notification.Notification;
import csheets.ui.ctrl.UIController;
import java.awt.GridLayout;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JOptionPane;

/**
 *
 * @author Martins
 */
public class ReminderPanel extends javax.swing.JPanel implements Observer {

	private final ReminderController controller;

	/**
	 * Creates new form EventsPanel
	 *
	 * @param uiController The user interface controller.
	 */
	public ReminderPanel(UIController uiController) {
		this.setName(ReminderExtension.NAME);
		this.initComponents();
		this.controller = new ReminderController(uiController, this);
		Notification.reminderInformer().addObserver(this);
		this.update(null, null);
	}

	@Override
	public void update(Observable o, Object arg) {
		if (arg instanceof Reminder) {
			Reminder reminder = (Reminder) arg;
			new TimedPopupDialog(null, "Reminder: " + reminder.name(), controller, reminder);
		} else {
			clearEventList();
			for (Reminder reminder : this.controller.allReminders()) {
				ReminderPanelSingle panel = new ReminderPanelSingle(this.controller, reminder);
				this.addReminderPanel(panel);
			}
			this.jPanelReminders.revalidate();
			this.jPanelReminders.repaint();
		}
	}

	private void addReminderPanel(ReminderPanelSingle panel) {
		this.jPanelReminders.add(panel);
		addGridRow();
	}

	/*
    * Deletes all information from event list.
	 */
	private void clearEventList() {
		this.jPanelReminders.removeAll();
		defaultGridRow();
	}

	/*
    * Layout specific: set's the default number of rows (5)
	 */
	private void defaultGridRow() {
		((GridLayout) this.jPanelReminders.getLayout()).setRows(5);
	}

	/*
    * Layout specific: add's a row to the panel's layout (to prevent adding a new colummn).
	 */
	private void addGridRow() {
		GridLayout layout = (GridLayout) this.jPanelReminders.getLayout();
		layout.setRows(layout.getRows() + 1);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButtonAddReminder = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanelReminders = new javax.swing.JPanel();

        jPanel1.setLayout(new java.awt.BorderLayout());

        jButtonAddReminder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/csheets/res/img/add_event.png"))); // NOI18N
        jButtonAddReminder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddReminderActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonAddReminder, java.awt.BorderLayout.EAST);

        jPanelReminders.setLayout(new java.awt.GridLayout(5, 1));
        jScrollPane1.setViewportView(jPanelReminders);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddReminderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddReminderActionPerformed
		ManageReminders reminder = new ManageReminders(this.controller, null);
		int reminderOption = JOptionPane.
			showConfirmDialog(null, reminder, "Create Reminder", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
		if (reminderOption == JOptionPane.OK_OPTION) {
			reminder.createReminder();
		}
    }//GEN-LAST:event_jButtonAddReminderActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddReminder;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelReminders;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
