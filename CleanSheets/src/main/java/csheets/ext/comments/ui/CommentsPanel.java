/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csheets.ext.comments.ui;

import csheets.core.Cell;
import csheets.ext.comments.Comment;
import csheets.ext.comments.CommentableCell;
import csheets.ext.comments.CommentableCellListener;
import csheets.ext.comments.CommentsExtension;
import csheets.notification.Notification;
import csheets.ui.ctrl.SelectionEvent;
import csheets.ui.ctrl.SelectionListener;
import csheets.ui.ctrl.UIController;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import javax.swing.BoxLayout;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

/**
 *
 * @author Rafael
 */
public class CommentsPanel extends JPanel implements SelectionListener,
	CommentableCellListener, Observer {

	/**
	 * The commentable cell currently being displayed in the panel
	 */
	private CommentableCell cell;

	/**
	 * The selected commentable cell's list of comments
	 */
	private List<CommentPanel> listComments;

	/**
	 * The assertion controller
	 */
	private CommentController controller;

	private final UIController uiController;

	private JPanel jPanel2;
	private BoxLayout layout;

	/**
	 * Creates new form CommentsPanel
	 *
	 * @param uiController the UIController
	 */
	public CommentsPanel(UIController uiController) {
		setName(CommentsExtension.NAME);
		initComponents();
		jPanel2 = new JPanel();
		layout = new BoxLayout(jPanel2, BoxLayout.Y_AXIS);
		jPanel2.setLayout(layout);
		jTextField1.setPreferredSize(null);

		JScrollPane scrollPane = new JScrollPane(jPanel2);
		scrollPane.
			setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		scrollPane.
			setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
		//scrollPane.setBounds(50, 30, 300, 50);
		add(scrollPane, BorderLayout.CENTER);

		// Creates controller
		controller = new CommentController(uiController);
		uiController.addSelectionListener(this);

		// Creates comment components
		CommentsPanel.ApplyAction applyAction = new CommentsPanel.ApplyAction();

		this.uiController = uiController;

		jTextField1.addFocusListener(applyAction);
		jTextField1.setAlignmentX(Component.CENTER_ALIGNMENT);
		this.update(null, null);
		Notification.commentInformer().addObserver(this);
	}

	@Override
	public void update(Observable o, Object arg) {
		this.jPanel2.removeAll();
		List<Comment> commentsList = controller.getCommentList(this.cell);
		for (Comment comment : commentsList) {
			CommentPanel cmtPanel = new CommentPanel(comment, uiController);

			jPanel2.add(cmtPanel);
			jTextField1.setText("");
			cmtPanel.setVisible(true);
		}
		this.revalidate();
		this.repaint();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 287, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 263, Short.MAX_VALUE)
        );

        jButton1.setText("jButton1");

        setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.BorderLayout());

        jTextField1.setAlignmentX(4.0F);
        jTextField1.setAlignmentY(4.0F);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });
        jPanel3.add(jTextField1, java.awt.BorderLayout.CENTER);
        jPanel3.add(jSeparator2, java.awt.BorderLayout.LINE_END);

        jLabel1.setText("Insert Comment:");
        jPanel3.add(jLabel1, java.awt.BorderLayout.PAGE_START);

        add(jPanel3, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
		// TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
		// TODO add your handling code here:
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
			if (this.cell != null) {
				newComment();
			}
		}
    }//GEN-LAST:event_jTextField1KeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

	/**
	 * Updates the comments field
	 *
	 * @param event the selection event that was fired
	 */
	@Override
	public void selectionChanged(SelectionEvent event) {
		Cell selectedCell = event.getCell();
		if (selectedCell != null) {
			CommentableCell activeCell
				= (CommentableCell) selectedCell.
				getExtension(CommentsExtension.NAME);
			activeCell.addCommentableCellListener(this);

			commentChanged(activeCell);
		}

		// Stops listening to previous active cell
		if (event.getPreviousCell() != null) {
			((CommentableCell) event.getPreviousCell().
				getExtension(CommentsExtension.NAME))
				.removeCommentableCellListener(this);
		}
	}

	/**
	 * Updates the comment field when the comments of the active cell is
	 * changed.
	 *
	 * @param cell the cell whose comments changed
	 */
	@Override
	public void commentChanged(CommentableCell cell) {
		// Stores the cell for use when applying comments
		this.cell = cell;

		if (this.cell.hasComments()) {
			paintCommentPanels();
		} else {
			cleanCommentsPanel();
		}

	}

	private void paintCommentPanels() {
		this.jPanel2.removeAll();
		List<Comment> commentsList = controller.getCommentList(this.cell);
		for (Comment comment : commentsList) {
			CommentPanel cmtPanel = new CommentPanel(comment, uiController);

			jPanel2.add(cmtPanel);
			jTextField1.setText("");
			cmtPanel.setVisible(true);
		}
		this.revalidate();
		this.repaint();
	}

	private void cleanCommentsPanel() {
		jPanel2.removeAll();
		refreshUI();
	}

	private void refreshUI() {
		revalidate();
		repaint();
	}

	private void newComment() {
		if (cell != null) {
			String comment = jTextField1.getText().trim();
			if (!comment.isEmpty() && !"".equalsIgnoreCase(comment)) {
				try {
					controller.addComment(cell, jTextField1.getText());
				} catch (Exception ex) {
					// nothing to do here yet
				}
			}
		}
	}

	protected class ApplyAction implements FocusListener {

		@Override
		public void focusGained(FocusEvent e) {

		}

		@Override
		public void focusLost(FocusEvent e) {
			newComment();
		}

	}
}
