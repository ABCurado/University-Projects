/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csheets.ext.chat.ui;

import com.sun.glass.events.KeyEvent;
import csheets.ext.chat.ChatController;
import csheets.ext.chat.domain.Message;
import csheets.ext.chat.domain.Room;
import csheets.ext.chat.domain.User;
import csheets.notification.Notification;
import csheets.support.DateTime;
import java.util.Observable;
import java.util.Observer;
import javax.swing.DefaultListModel;

/**
 *
 * @author valhalla
 */
public class InteractionFrame extends javax.swing.JFrame implements Observer {

	private ChatController controller;
	private User user = null;
	private Room room = null;
	private String host;
	private String name;
	private Message.Type type;
	private DefaultListModel<Message> model;

	public InteractionFrame(ChatController controller, String host, String name,
							Message.Type type) {
		this.controller = controller;
		this.host = host;
		this.name = name;
		this.type = type;
		this.initComponents();
		this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		this.model = new DefaultListModel();
		this.jList1.setModel(model);
		for (Message message : this.controller.
			getMessages(this.host, this.name, this.type)) {
			this.model.addElement(message);
		}
		this.update(null, null);
		this.setVisible(true);
		Notification.chatMessageInformer().addObserver(this);
	}

	public InteractionFrame(ChatController controller, Room room) {
		this(controller, room.creator().name(), room.name(), Message.Type.ROOM);
		this.room = room;
	}

	public InteractionFrame(ChatController controller, User user) {
		this(controller, user.name(), user.nickname(), Message.Type.USER);
		this.user = user;
	}

	@Override
	public void update(Observable o, Object arg) {
		if (arg instanceof String) {
			System.out.println(((String) arg));
			String[] data = ((String) arg).split(";");
			if (this.room != null && data[0].equals("sendMessageRoom") && data[1].
				equals(this.room.name()) && data[2].equals(this.room.creator().
				name())) {
				Message message = new Message(this.room, DateTime.now(), data[3]);
				this.model.addElement(message);
			} else if (this.user != null && data[0].equals("sendMessageUser") && data[1].
				equals(this.user.name())) {
				Message message = new Message(this.user, DateTime.now(), data[3]);
				this.model.addElement(message);
			}
			/*
			for (Map.Entry entry : data.entrySet()) {
				System.out.
					println("update - key: " + entry.getKey() + " - value: " + entry.
						getValue());
			}
			 */
		}
	}

	public void sendMessage(String message) {
		if (this.user != null) {
			this.controller.sendMessage(this.user, message);
		} else if (this.room != null) {
			this.controller.sendMessage(this.room, message);
		} else {
			this.controller.
				sendMessage(this.host, this.name, this.type, message);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(jList1);

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });

        jButton1.setText("Send");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 147, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
			this.sendMessage(this.jTextField1.getText());
			this.jTextField1.setText("");
		}
    }//GEN-LAST:event_jTextField1KeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JList<Message> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
