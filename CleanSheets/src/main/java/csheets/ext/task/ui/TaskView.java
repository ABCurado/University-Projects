/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csheets.ext.task.ui;

import csheets.domain.Event;
import csheets.domain.Reminder;
import csheets.domain.Task;
import csheets.ext.contacts.ui.*;
import csheets.ext.events.EventsController;
import csheets.ext.events.ui.EventView;
import csheets.ext.reminder.ui.ReminderView;
import csheets.ext.task.TaskController;
import csheets.notification.Notification;
import csheets.support.DateTime;
import java.util.Calendar;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import javax.swing.tree.DefaultMutableTreeNode;

/**
 *
 * @author Martins
 */
public class TaskView extends javax.swing.JFrame implements Observer {

	private TaskController controller;
	DefaultMutableTreeNode root;
	private Task task;
	private Event event;
	private Reminder reminder;

	/**
	 * Creates new form EventView
	 *
	 * @param controller controller
	 * @param task task
	 */
	public TaskView(TaskController controller, Task task) {
		this.controller = controller;
		this.task = task;
		initComponents();
		this.setLocationRelativeTo(null);
		this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		setVisible(true);

		DefaultMutableTreeNode treeRoot = (DefaultMutableTreeNode) this.jTreeEvent.
			getModel().getRoot();
		this.root = new DefaultMutableTreeNode("Task: " + this.task.TaskName());
		treeRoot.add(root);

		this.update(null, null);
		Notification.eventInformer().addObserver(this);
	}

	@Override
	public void update(Observable o, Object arg) {
		this.jLabel1.setText("Name: " + this.task.TaskName());
		this.jLabel2.setText("Description : " + this.task.Description());
		try {
			this.jTreeEvent.removeAll();
			if (this.task.getDeadLineEvent() != null) {
				this.event = this.task.getDeadLineEvent();
				this.jLabel3.setText("DeadLine: " + DateTime.format(this.event.
					endDate()));
				DefaultMutableTreeNode eventRoot = new DefaultMutableTreeNode("Event: " + this.event.
					description());
				root.add(eventRoot);
			} else if (this.task.getDeadLineReminder() != null) {
				this.reminder = this.task.getDeadLineReminder();
				this.jLabel3.setText("DeadLine: " + DateTime.
					format(this.reminder.timeOfReminder()));
				DefaultMutableTreeNode reminderRoot = new DefaultMutableTreeNode("Reminder: " + this.reminder.
					name());
				root.add(reminderRoot);
			} else if (this.task.getDeadLineTime() instanceof Calendar) {
				this.jLabel3.setText("DeadLine: " + DateTime.
					format(this.task.getDeadLineTime()));
			} else {
				this.jLabel3.setText("No DeadLine");
			}
			this.jTreeEvent.revalidate();
			this.jTreeEvent.repaint();
		} catch (Exception ex) {
			Logger.getLogger(CompanyView.class.getName()).
				log(Level.SEVERE, null, ex);

		}
		this.revalidate();
		this.repaint();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTreeEvent = new javax.swing.JTree();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        jTextField2.setText("jTextField2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTreeEvent.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTreeEvent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTreeEventMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTreeEvent);

        jLabel1.setText("jLabel1");

        jLabel2.setText("jLabel2");

        jLabel3.setText("jLabel3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTreeEventMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTreeEventMouseClicked
		if (evt.getClickCount() == 3) {
			DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTreeEvent.
				getLastSelectedPathComponent();
			if (node == null) {
				return;
			}
			String[] info = node.getUserObject().toString().split(":");
			if (info[0].equalsIgnoreCase("Event")) {
				new EventView(new EventsController(null, null), event);
			} else if (info[0].equalsIgnoreCase("Reminder")) {
				new ReminderView(reminder);
			}
		}
    }//GEN-LAST:event_jTreeEventMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTree jTreeEvent;
    // End of variables declaration//GEN-END:variables

}
