/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csheets.ext.workbookGlobalVariable.ui;

import csheets.SpreadsheetAppEvent;
import csheets.SpreadsheetAppListener;
import csheets.core.Cell;
import csheets.core.CellImpl;
import csheets.core.Spreadsheet;
import csheets.core.Value;
import csheets.core.formula.VariableArray;
import csheets.ext.workbookGlobalVariable.WorkbookGlobalVariableController;
import csheets.ext.workbookGlobalVariable.WorkbookGlobalVariableExtension;
import csheets.ui.DefaulListModel;
import csheets.ui.ctrl.UIController;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;

/**
 * Side Bar Panel.
 *
 * @author Pedro Gomes 1130383@isep.ipp.pt
 */
public class WorkbookGlobalVariablePanel extends JPanel implements SpreadsheetAppListener {

	/**
	 * UIController. Useful to get the current Workbook.
	 */
	private UIController uicontroller;

	/**
	 * Controller of WorkbookGlobalVariable.
	 */
	private WorkbookGlobalVariableController thecontroller;

	/**
	 * Updated value.
	 */
	private String newValue;

	/**
	 * List of indexes used.
	 */
	private List<Integer> index_values = new ArrayList<>();

	/**
	 * Values List.
	 */
	private List<String> values = new ArrayList<>();

	/**
	 * Variable List.
	 */
	private List<VariableArray> variables = new ArrayList<>();

	/**
	 * Variables Model List.
	 */
	private DefaulListModel variables_list = new DefaulListModel();

	/**
	 * Value Model List.
	 */
	private DefaulListModel values_list = new DefaulListModel();

	/**
	 * Creates new form WorkbookGlobalVariablePanel.
	 *
	 * @param uicontroller uicontroller.
	 */
	public WorkbookGlobalVariablePanel(UIController uicontroller) {
		setName(WorkbookGlobalVariableExtension.NAME);
		this.uicontroller = uicontroller;
		thecontroller = new WorkbookGlobalVariableController(uicontroller);
		jVariableList = new JList(variables_list);
		jValueList = new JList(values_list);
		jVariableList.setEnabled(false);
		initComponents();
		addListener();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jVariableList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jValueList = new javax.swing.JList();
        jgetVariablesButton = new javax.swing.JButton();
        jAddVariableButton = new javax.swing.JButton();
        jInfoText = new javax.swing.JLabel();

        jVariableList.setEnabled(false);
        jVariableList.setModel(new DefaulListModel());

        jVariableList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jVariableListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jVariableList);

        jValueList.setModel(new DefaulListModel());
        jValueList.setVisible(false);
        jValueList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent e) {
                jValueListMouseClicked(e);
            }
        });
        jScrollPane2.setViewportView(jValueList);

        jgetVariablesButton.setText("Refresh ");
        jgetVariablesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jgetVariablesButtonActionPerformed(evt);
            }
        });

        jAddVariableButton.setText("Add new Variable");
        jAddVariableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAddVariableButtonActionPerformed(evt);
            }
        });

        jInfoText.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        jInfoText.setText("<html><div style='text-align: center;'> double-tap to edit value</html>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
            .addComponent(jScrollPane2)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jgetVariablesButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jAddVariableButton))
            .addGroup(layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(jInfoText)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jgetVariablesButton)
                    .addComponent(jAddVariableButton))
                .addGap(8, 8, 8)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jInfoText)
                .addGap(4, 4, 4)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
	/**
	 * Refresh Button. This method concerns the action associated with pressing
	 * the Button.
	 *
	 * @param evt event.
	 */
    private void jgetVariablesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jgetVariablesButtonActionPerformed
		/**
		 * Clearing - Refreshing Variables.
		 */
		values_list.clear();
		variables_list.clear();
		values.clear();
		index_values.clear();
		newValue = null;
		buildVariableList();
		updatesCellContent();
    }//GEN-LAST:event_jgetVariablesButtonActionPerformed

    private void jAddVariableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAddVariableButtonActionPerformed
		interactAddDialogPanel();
    }//GEN-LAST:event_jAddVariableButtonActionPerformed

	/**
	 * Add this Class as listener to the Cleansheets App.
	 */
	private void addListener() {
		this.uicontroller.getCleanSheets().addSpreadsheetAppListener(this);
	}

	/**
	 * This method retrieves the current Variables from the Workbook. The
	 * Workbook provides the access to its variables. This variales will fill
	 * the jVariableList component and from that point access will be granted
	 * for each Value of each position of the Variable.
	 */
	private void buildVariableList() {
		variables_list.clear();
		variables = thecontroller.getCurrentVariables(); //controller operation.
		/**
		 * Building Variale List.
		 */
		for (int i = 0; i < variables.size(); i++) {
			variables_list.addElement(variables.get(i)); //adds all variables to the list.
		}
		jVariableList.setModel(variables_list); //sets up the list component.
		jVariableList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); //single selection.
		jVariableList.setEnabled(true);
		jVariableList.setVisible(true);
	}

	/**
	 * This method handles different behaviour associated with mouse
	 * interaction. For one-click over the Variable a second List appears
	 * showing the correspondent Values of that Variable in each position.
	 *
	 * @param evt mouse event.
	 */
	private void jVariableListMouseClicked(MouseEvent evt) {
		if (evt.getClickCount() == 1) { //if clicked once.
			values.clear();
			index_values.clear();
			VariableArray var = (VariableArray) jVariableList.getSelectedValue(); //Retrieves Variable.
			for (int i = 1; i < var.getArray().size(); i++) { //iterates through Variable.
				if (!var.getValue(i).toString().equals("0")) { // checks if the Value on each position is not 0.
					index_values.add(i); //saves the position user in the variable.
					values.add("[" + i + "] = " + var.getValue(i).
						toString()); // adds the correspondent Value to list container.
				}
			}
		}
		buildValueList(); //Builds Value List.
	}

	/**
	 * This method builds the Value List. The Value List associated with each
	 * Variable is only shown when the user one-click over a specific Variable.
	 */
	private void buildValueList() {
		values_list.clear();
		for (int i = 0; i < values.size(); i++) {
			values_list.addElement(values.get(i));
		}
		jValueList.setModel(values_list);
		jValueList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);//single selection.
		jValueList.setEnabled(true);
		jValueList.setVisible(true);
	}

	/**
	 * This method handles behaviour associated with mouse interaction. By
	 * clicking twice over a specific Value of a Variable the user is able to
	 * edit its Value.
	 *
	 * @param e mouse event.
	 */
	private void jValueListMouseClicked(MouseEvent e) {
		if (e.getClickCount() == 2) { // if clicked twice.
			interactEditDialogPanel(); //opens Dialog.
			Value value = thecontroller.parseValue(newValue); //parse Value.
			int index = jValueList.getSelectedIndex(); //the index selected.
			VariableArray var = (VariableArray) jVariableList.getSelectedValue(); //gets selected Variable.
			for (VariableArray variable : variables) { //go through all variables in the workbook to find the one to change
				if (variable.getName().equalsIgnoreCase(var.getName())) { // find variable by name.
					variable.addValueToVariable(value, index_values.get(index)); //update Values.
					break;
				}
			}
		}
		updatesCellContent();
		refreshValueList();
	}

	/**
	 * Creates a Dialog to set up the new Variable Value.
	 */
	private void interactEditDialogPanel() {
		WorkbookGlobalVariableEditDialog dialog = new WorkbookGlobalVariableEditDialog();
		dialog.setVisible(true);
		newValue = dialog.getValue(); //Retrieves the new value.
	}

	/**
	 * Creates a Dialog to set up a complete new Variable.
	 */
	private void interactAddDialogPanel() {
		WorkbookGlobalVariableAddDialog dialog = new WorkbookGlobalVariableAddDialog();
		dialog.setVisible(true);
		/**
		 * Retrieving Values.
		 */
		String value = dialog.getValue();
		String name = dialog.getVarName(); //assuming it has already @.
		String position = dialog.getPosition();
		Value _value = thecontroller.parseValue(value);
		int pos = Integer.parseInt(position);
		this.uicontroller.getActiveWorkbook().
			addVariableByName(name, _value, pos);
		buildVariableList();
		buildValueList();
		updatesCellContent();
	}

	/**
	 * Reevaluate the entire Workbook.
	 */
	private void updatesCellContent() {
		for (Spreadsheet ss : this.uicontroller.getActiveWorkbook()) {
			for (Cell c : ss) {
				CellImpl cell = (CellImpl) c;
				cell.reevatuate_();
			}
		}
	}

	/**
	 * Updates current Value List.
	 */
	private void refreshValueList() {
		values_list.clear(); //going to be updated.
		newValue = null;
		values.clear();
		VariableArray var = (VariableArray) jVariableList.getSelectedValue(); //Retrieves Variable.
		for (int i = 1; i < var.getArray().size(); i++) { //iterates through Variable.
			if (!var.getValue(i).toString().equals("0")) { // checks if the Value on each position is not 0.
				index_values.add(i); //saves the position user in the variable.
				values.add("[" + i + "] = " + var.getValue(i).
					toString()); // adds the correspondent Value to list container.
			}
		}
		buildValueList(); //builds updated Value List.
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAddVariableButton;
    private javax.swing.JLabel jInfoText;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList jValueList;
    private javax.swing.JList jVariableList;
    private javax.swing.JButton jgetVariablesButton;
    // End of variables declaration//GEN-END:variables

	@Override
	public void workbookCreated(SpreadsheetAppEvent event) {
	}

	/**
	 * This method runs on notification when a new Workbook is openned.
	 *
	 * @param event event.
	 */
	@Override
	public void workbookLoaded(SpreadsheetAppEvent event) {
		buildVariableList();
	}

	@Override
	public void workbookUnloaded(SpreadsheetAppEvent event) {
	}

	@Override
	public void workbookSaved(SpreadsheetAppEvent event) {
	}
}
